#!/bin/bash
commit_msg_file="$1"
commit_msg=$(cat "$commit_msg_file")

# 현재 브랜치명 (detached HEAD 대비)
branch_name=$(git symbolic-ref --quiet --short HEAD 2>/dev/null)
if [[ -z "$branch_name" ]]; then
  # 브랜치가 아니면 검사 생략
  exit 0
fi

# feature/DEV1234 또는 feature/DEV1234_..., feature/DEV1234/foo 등 모두 허용
if [[ $branch_name =~ ^feature\/(DEV[0-9]{4})(?:[\/_-].*)?$ ]]; then
  ticket="${BASH_REMATCH[1]}"
  if [[ ! $commit_msg =~ \[$ticket\] ]]; then
    echo "[ERROR] feature/DEV 브랜치에서는 커밋 메시지에 [${ticket}] 형식을 포함해야 합니다."
    exit 1
  fi

# fix_ng_1234 또는 fix_ng_1234_..., fix_ng_1234/foo 등
elif [[ $branch_name =~ ^fix_ng_([0-9]+)(?:[\/_-].*)?$ ]]; then
  num="${BASH_REMATCH[1]}"
  if [[ ! $commit_msg =~ \[fix_ng_${num}\] ]]; then
    echo "[ERROR] fix_ng_ 브랜치에서는 커밋 메시지에 [fix_ng_${num}] 형식을 포함해야 합니다."
    exit 1
  fi

# refactor_5678 또는 refactor_5678_..., refactor_5678/foo 등
elif [[ $branch_name =~ ^refactor_([0-9]+)(?:[\/_-].*)?$ ]]; then
  num="${BASH_REMATCH[1]}"
  if [[ ! $commit_msg =~ \[refactor_${num}\] ]]; then
    echo "[ERROR] refactor_ 브랜치에서는 커밋 메시지에 [refactor_${num}] 형식을 포함해야 합니다."
    exit 1
  fi

else
  # main, develop, 기타 브랜치 → 검사 생략
  exit 0
fi
